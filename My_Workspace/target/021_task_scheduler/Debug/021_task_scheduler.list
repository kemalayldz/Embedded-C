
021_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e04  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800105c  0800105c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800105c  0800105c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800105c  0800105c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800105c  0800105c  0001105c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001060  08001060  00011060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000074  080010d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080010d8  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000233f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000061e  00000000  00000000  000223e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000190  00000000  00000000  00022a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000158  00000000  00000000  00022b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b52  00000000  00000000  00022cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000137e  00000000  00000000  00025842  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000093a8  00000000  00000000  00026bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ff68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af0  00000000  00000000  0002ffe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f94 	.word	0x08000f94

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	08000f94 	.word	0x08000f94

080001e8 <main>:
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START,T2_STACK_START,T3_STACK_START,T4_STACK_START};
uint32_t task_handlers[MAX_TASKS];

uint8_t current_task = 0; //taks 1 is running
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80001ec:	f000 f8c8 	bl	8000380 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80001f0:	480d      	ldr	r0, [pc, #52]	; (8000228 <main+0x40>)
 80001f2:	f000 f87b 	bl	80002ec <init_scheduler_stack>

	task_handlers[0] = (uint32_t) task1_handler;
 80001f6:	4a0d      	ldr	r2, [pc, #52]	; (800022c <main+0x44>)
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <main+0x48>)
 80001fa:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t) task2_handler;
 80001fc:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <main+0x4c>)
 80001fe:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <main+0x48>)
 8000200:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t) task3_handler;
 8000202:	4a0d      	ldr	r2, [pc, #52]	; (8000238 <main+0x50>)
 8000204:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <main+0x48>)
 8000206:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t) task4_handler;
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <main+0x54>)
 800020a:	4b09      	ldr	r3, [pc, #36]	; (8000230 <main+0x48>)
 800020c:	60da      	str	r2, [r3, #12]
	init_tasks_stack();
 800020e:	f000 f871 	bl	80002f4 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 8000212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000216:	f000 f833 	bl	8000280 <init_systick_timer>

	switch_sp_to_psp();
 800021a:	f000 f90f 	bl	800043c <switch_sp_to_psp>


	task1_handler();
 800021e:	f000 f80f 	bl	8000240 <task1_handler>
 8000222:	2300      	movs	r3, #0

}
 8000224:	4618      	mov	r0, r3
 8000226:	bd80      	pop	{r7, pc}
 8000228:	2001f000 	.word	0x2001f000
 800022c:	08000241 	.word	0x08000241
 8000230:	200000a0 	.word	0x200000a0
 8000234:	08000251 	.word	0x08000251
 8000238:	08000261 	.word	0x08000261
 800023c:	08000271 	.word	0x08000271

08000240 <task1_handler>:

void task1_handler(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	while(1){
		printf("this is task1.\n");
 8000244:	4801      	ldr	r0, [pc, #4]	; (800024c <task1_handler+0xc>)
 8000246:	f000 fa99 	bl	800077c <puts>
 800024a:	e7fb      	b.n	8000244 <task1_handler+0x4>
 800024c:	08000fac 	.word	0x08000fac

08000250 <task2_handler>:
	}

}
void task2_handler(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0

	while(1){
		printf("this is task2.\n");
 8000254:	4801      	ldr	r0, [pc, #4]	; (800025c <task2_handler+0xc>)
 8000256:	f000 fa91 	bl	800077c <puts>
 800025a:	e7fb      	b.n	8000254 <task2_handler+0x4>
 800025c:	08000fbc 	.word	0x08000fbc

08000260 <task3_handler>:
	}
}

void task3_handler(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	while(1){
	printf("this is task1.\n");
 8000264:	4801      	ldr	r0, [pc, #4]	; (800026c <task3_handler+0xc>)
 8000266:	f000 fa89 	bl	800077c <puts>
 800026a:	e7fb      	b.n	8000264 <task3_handler+0x4>
 800026c:	08000fac 	.word	0x08000fac

08000270 <task4_handler>:
	}
}

void task4_handler(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

	while(1){
		printf("this is task1.\n");
 8000274:	4801      	ldr	r0, [pc, #4]	; (800027c <task4_handler+0xc>)
 8000276:	f000 fa81 	bl	800077c <puts>
 800027a:	e7fb      	b.n	8000274 <task4_handler+0x4>
 800027c:	08000fac 	.word	0x08000fac

08000280 <init_systick_timer>:
	}
}
void init_systick_timer(uint32_t tick_hz){
 8000280:	b480      	push	{r7}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uint32_t *pSVR = (uint32_t*) 0xE000E014;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <init_systick_timer+0x60>)
 800028a:	617b      	str	r3, [r7, #20]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz)-1;
 800028c:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <init_systick_timer+0x64>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	fbb2 f3f3 	udiv	r3, r2, r3
 8000294:	3b01      	subs	r3, #1
 8000296:	613b      	str	r3, [r7, #16]
	uint32_t *pCSR = (uint32_t*) 0xE000E010;
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <init_systick_timer+0x68>)
 800029a:	60fb      	str	r3, [r7, #12]

	//clear the of SVR
	*pSVR &=(0x00FFFFFFFF);
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	601a      	str	r2, [r3, #0]

	//load the value into SVR

	*pSVR |= count_value;
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	431a      	orrs	r2, r3
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	601a      	str	r2, [r3, #0]

	//Configure the CSR
	*pCSR |= (1<<1); //Enables the systick exception request
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f043 0202 	orr.w	r2, r3, #2
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	601a      	str	r2, [r3, #0]
	*pCSR |= (1<<2); //Indicates the clock source; processor clock source
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f043 0204 	orr.w	r2, r3, #4
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	601a      	str	r2, [r3, #0]
	*pCSR |= (1<<0); //enables the counter
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f043 0201 	orr.w	r2, r3, #1
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	601a      	str	r2, [r3, #0]
}
 80002d4:	bf00      	nop
 80002d6:	371c      	adds	r7, #28
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	e000e014 	.word	0xe000e014
 80002e4:	00f42400 	.word	0x00f42400
 80002e8:	e000e010 	.word	0xe000e010

080002ec <init_scheduler_stack>:

__attribute ((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
	__asm volatile("MSR MSP,R0");
 80002ec:	f380 8808 	msr	MSP, r0
	__asm volatile("BX LR");
 80002f0:	4770      	bx	lr

}
 80002f2:	bf00      	nop

080002f4 <init_tasks_stack>:

void init_tasks_stack(void){
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0

	uint32_t *pPSP;
	for(int i = 0; i<MAX_TASKS; i++){
 80002fa:	2300      	movs	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	e032      	b.n	8000366 <init_tasks_stack+0x72>
		pPSP = (uint32_t *) psp_of_tasks[i];
 8000300:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <init_tasks_stack+0x84>)
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000308:	60fb      	str	r3, [r7, #12]
		pPSP--;
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	3b04      	subs	r3, #4
 800030e:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000316:	601a      	str	r2, [r3, #0]
		pPSP--; //PC
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3b04      	subs	r3, #4
 800031c:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 800031e:	4a17      	ldr	r2, [pc, #92]	; (800037c <init_tasks_stack+0x88>)
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	601a      	str	r2, [r3, #0]
		pPSP--;
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	3b04      	subs	r3, #4
 800032e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD; //return address
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f06f 0202 	mvn.w	r2, #2
 8000336:	601a      	str	r2, [r3, #0]
		for(uint32_t j = 0; j<13; j++){
 8000338:	2300      	movs	r3, #0
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	e008      	b.n	8000350 <init_tasks_stack+0x5c>
			pPSP--;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3b04      	subs	r3, #4
 8000342:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
		for(uint32_t j = 0; j<13; j++){
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	3301      	adds	r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b0c      	cmp	r3, #12
 8000354:	d9f3      	bls.n	800033e <init_tasks_stack+0x4a>
		}
		psp_of_tasks[i] = (uint32_t) pPSP;
 8000356:	68fa      	ldr	r2, [r7, #12]
 8000358:	4907      	ldr	r1, [pc, #28]	; (8000378 <init_tasks_stack+0x84>)
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i<MAX_TASKS; i++){
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	3301      	adds	r3, #1
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	2b03      	cmp	r3, #3
 800036a:	ddc9      	ble.n	8000300 <init_tasks_stack+0xc>

	}


}
 800036c:	bf00      	nop
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	20000000 	.word	0x20000000
 800037c:	200000a0 	.word	0x200000a0

08000380 <enable_processor_faults>:

void enable_processor_faults(void){
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
	uint32_t *pSHCRS = (uint32_t*) 0xE000ED24;
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <enable_processor_faults+0x3c>)
 8000388:	607b      	str	r3, [r7, #4]

	*pSHCRS |= (1<<16); //mem manage
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	601a      	str	r2, [r3, #0]
	*pSHCRS |= (1<<17);	//bus fault
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	601a      	str	r2, [r3, #0]
	*pSHCRS |= (1<<18); //usage fault
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	601a      	str	r2, [r3, #0]

}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000ed24 	.word	0xe000ed24

080003c0 <get_psp_value>:

uint32_t get_psp_value(void){
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

	return psp_of_tasks[current_task];
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <get_psp_value+0x1c>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	461a      	mov	r2, r3
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <get_psp_value+0x20>)
 80003cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]

}
 80003d0:	4618      	mov	r0, r3
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000090 	.word	0x20000090
 80003e0:	20000000 	.word	0x20000000

080003e4 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <save_psp_value+0x24>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	4619      	mov	r1, r3
 80003f2:	4a06      	ldr	r2, [pc, #24]	; (800040c <save_psp_value+0x28>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	20000090 	.word	0x20000090
 800040c:	20000000 	.word	0x20000000

08000410 <update_next_task>:

void update_next_task(void){
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	current_task++;
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <update_next_task+0x28>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	3301      	adds	r3, #1
 800041a:	b2da      	uxtb	r2, r3
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <update_next_task+0x28>)
 800041e:	701a      	strb	r2, [r3, #0]
	current_task = 	current_task % 4 ;
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <update_next_task+0x28>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	f003 0303 	and.w	r3, r3, #3
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b03      	ldr	r3, [pc, #12]	; (8000438 <update_next_task+0x28>)
 800042c:	701a      	strb	r2, [r3, #0]
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	20000090 	.word	0x20000090

0800043c <switch_sp_to_psp>:

__attribute ((nacked)) void switch_sp_to_psp(void){
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	//1.initialize the PSP with TASK1 stack start

	//get the value of psp of current task
	__asm volatile("PUSH {LR}"); //preserve LR which connects back to the main()
 8000440:	b500      	push	{lr}
	__asm volatile("BL get_psp_value"); //Bl for return the that function after invoking get_psp_value
 8000442:	f7ff ffbd 	bl	80003c0 <get_psp_value>
	__asm volatile("MSR PSP,R0"); //initialize psp
 8000446:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}"); //pops back LR value
 800044a:	f85d eb04 	ldr.w	lr, [sp], #4

	//2.change SP to PSP using control register
	__asm volatile("MOV R0,#0x02");
 800044e:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 8000452:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000456:	4770      	bx	lr
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <SysTick_Handler>:
__attribute((nacked)) void SysTick_Handler(void){
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
	/*Save the context of current task*/

	//1.Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 8000466:	f3ef 8009 	mrs	r0, PSP
	//2.Using that PSP value store SF2(R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 800046a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//3.Save the current value of PSP
	__asm volatile("PUSH {LR}");
 800046e:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");
 8000470:	f7ff ffb8 	bl	80003e4 <save_psp_value>
	/*Retrieve the context of next task*/

	//1.Decide next task to run
	__asm volatile("BL update_next_task");
 8000474:	f7ff ffcc 	bl	8000410 <update_next_task>
	//2.get its past PSP value
	__asm volatile("BL get_psp_value");
 8000478:	f7ff ffa2 	bl	80003c0 <get_psp_value>
	//3.using that PSP value retrieve SF2(R4 to R11)
	__asm volatile("LDMIA R0!,{R4-R11}");
 800047c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4.update the PSP and exit
	__asm volatile("MSR PSP, R0");
 8000480:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000484:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 8000488:	4770      	bx	lr

}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <HardFault_Handler>:

void HardFault_Handler(void){
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	printf("Hard fault\n");
 8000498:	4801      	ldr	r0, [pc, #4]	; (80004a0 <HardFault_Handler+0xc>)
 800049a:	f000 f96f 	bl	800077c <puts>
	while(1);
 800049e:	e7fe      	b.n	800049e <HardFault_Handler+0xa>
 80004a0:	08000fcc 	.word	0x08000fcc

080004a4 <MemManage_Handler>:
}
void MemManage_Handler(void){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

	printf("Mem Manage Fault\n");
 80004a8:	4801      	ldr	r0, [pc, #4]	; (80004b0 <MemManage_Handler+0xc>)
 80004aa:	f000 f967 	bl	800077c <puts>
	while(1);
 80004ae:	e7fe      	b.n	80004ae <MemManage_Handler+0xa>
 80004b0:	08000fd8 	.word	0x08000fd8

080004b4 <BusFault_Handler>:
}

void BusFault_Handler(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

	printf("Bus Fault \n");
 80004b8:	4801      	ldr	r0, [pc, #4]	; (80004c0 <BusFault_Handler+0xc>)
 80004ba:	f000 f95f 	bl	800077c <puts>
	while(1);
 80004be:	e7fe      	b.n	80004be <BusFault_Handler+0xa>
 80004c0:	08000fec 	.word	0x08000fec

080004c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	e00a      	b.n	80004ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004d6:	f3af 8000 	nop.w
 80004da:	4601      	mov	r1, r0
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	1c5a      	adds	r2, r3, #1
 80004e0:	60ba      	str	r2, [r7, #8]
 80004e2:	b2ca      	uxtb	r2, r1
 80004e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	3301      	adds	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	dbf0      	blt.n	80004d6 <_read+0x12>
	}

return len;
 80004f4:	687b      	ldr	r3, [r7, #4]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b086      	sub	sp, #24
 8000502:	af00      	add	r7, sp, #0
 8000504:	60f8      	str	r0, [r7, #12]
 8000506:	60b9      	str	r1, [r7, #8]
 8000508:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	e009      	b.n	8000524 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	60ba      	str	r2, [r7, #8]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	3301      	adds	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697a      	ldr	r2, [r7, #20]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	429a      	cmp	r2, r3
 800052a:	dbf1      	blt.n	8000510 <_write+0x12>
	}
	return len;
 800052c:	687b      	ldr	r3, [r7, #4]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <_close>:

int _close(int file)
{
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
	return -1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800055e:	605a      	str	r2, [r3, #4]
	return 0;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <_isatty>:

int _isatty(int file)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
	return 1;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
	return 0;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f000 f846 	bl	8000660 <__errno>
 80005d4:	4602      	mov	r2, r0
 80005d6:	230c      	movs	r3, #12
 80005d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20020000 	.word	0x20020000
 8000600:	00000400 	.word	0x00000400
 8000604:	20000094 	.word	0x20000094
 8000608:	200000b8 	.word	0x200000b8

0800060c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000610:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <LoopForever+0xe>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	; (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800063a:	f000 f817 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fdd3 	bl	80001e8 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   r0, =_estack
 8000644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000650:	08001064 	.word	0x08001064
  ldr r2, =_sbss
 8000654:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000658:	200000b4 	.word	0x200000b4

0800065c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC_IRQHandler>
	...

08000660 <__errno>:
 8000660:	4b01      	ldr	r3, [pc, #4]	; (8000668 <__errno+0x8>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000010 	.word	0x20000010

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4e0d      	ldr	r6, [pc, #52]	; (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	; (80006a8 <__libc_init_array+0x3c>)
 8000672:	1ba4      	subs	r4, r4, r6
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2500      	movs	r5, #0
 8000678:	42a5      	cmp	r5, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4e0b      	ldr	r6, [pc, #44]	; (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	; (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 fc88 	bl	8000f94 <_init>
 8000684:	1ba4      	subs	r4, r4, r6
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2500      	movs	r5, #0
 800068a:	42a5      	cmp	r5, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000694:	4798      	blx	r3
 8000696:	3501      	adds	r5, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800069e:	4798      	blx	r3
 80006a0:	3501      	adds	r5, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	0800105c 	.word	0x0800105c
 80006a8:	0800105c 	.word	0x0800105c
 80006ac:	0800105c 	.word	0x0800105c
 80006b0:	08001060 	.word	0x08001060

080006b4 <memset>:
 80006b4:	4402      	add	r2, r0
 80006b6:	4603      	mov	r3, r0
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d100      	bne.n	80006be <memset+0xa>
 80006bc:	4770      	bx	lr
 80006be:	f803 1b01 	strb.w	r1, [r3], #1
 80006c2:	e7f9      	b.n	80006b8 <memset+0x4>

080006c4 <_puts_r>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	460e      	mov	r6, r1
 80006c8:	4605      	mov	r5, r0
 80006ca:	b118      	cbz	r0, 80006d4 <_puts_r+0x10>
 80006cc:	6983      	ldr	r3, [r0, #24]
 80006ce:	b90b      	cbnz	r3, 80006d4 <_puts_r+0x10>
 80006d0:	f000 fa0c 	bl	8000aec <__sinit>
 80006d4:	69ab      	ldr	r3, [r5, #24]
 80006d6:	68ac      	ldr	r4, [r5, #8]
 80006d8:	b913      	cbnz	r3, 80006e0 <_puts_r+0x1c>
 80006da:	4628      	mov	r0, r5
 80006dc:	f000 fa06 	bl	8000aec <__sinit>
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <_puts_r+0xac>)
 80006e2:	429c      	cmp	r4, r3
 80006e4:	d117      	bne.n	8000716 <_puts_r+0x52>
 80006e6:	686c      	ldr	r4, [r5, #4]
 80006e8:	89a3      	ldrh	r3, [r4, #12]
 80006ea:	071b      	lsls	r3, r3, #28
 80006ec:	d51d      	bpl.n	800072a <_puts_r+0x66>
 80006ee:	6923      	ldr	r3, [r4, #16]
 80006f0:	b1db      	cbz	r3, 800072a <_puts_r+0x66>
 80006f2:	3e01      	subs	r6, #1
 80006f4:	68a3      	ldr	r3, [r4, #8]
 80006f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006fa:	3b01      	subs	r3, #1
 80006fc:	60a3      	str	r3, [r4, #8]
 80006fe:	b9e9      	cbnz	r1, 800073c <_puts_r+0x78>
 8000700:	2b00      	cmp	r3, #0
 8000702:	da2e      	bge.n	8000762 <_puts_r+0x9e>
 8000704:	4622      	mov	r2, r4
 8000706:	210a      	movs	r1, #10
 8000708:	4628      	mov	r0, r5
 800070a:	f000 f83f 	bl	800078c <__swbuf_r>
 800070e:	3001      	adds	r0, #1
 8000710:	d011      	beq.n	8000736 <_puts_r+0x72>
 8000712:	200a      	movs	r0, #10
 8000714:	e011      	b.n	800073a <_puts_r+0x76>
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <_puts_r+0xb0>)
 8000718:	429c      	cmp	r4, r3
 800071a:	d101      	bne.n	8000720 <_puts_r+0x5c>
 800071c:	68ac      	ldr	r4, [r5, #8]
 800071e:	e7e3      	b.n	80006e8 <_puts_r+0x24>
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <_puts_r+0xb4>)
 8000722:	429c      	cmp	r4, r3
 8000724:	bf08      	it	eq
 8000726:	68ec      	ldreq	r4, [r5, #12]
 8000728:	e7de      	b.n	80006e8 <_puts_r+0x24>
 800072a:	4621      	mov	r1, r4
 800072c:	4628      	mov	r0, r5
 800072e:	f000 f87f 	bl	8000830 <__swsetup_r>
 8000732:	2800      	cmp	r0, #0
 8000734:	d0dd      	beq.n	80006f2 <_puts_r+0x2e>
 8000736:	f04f 30ff 	mov.w	r0, #4294967295
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	2b00      	cmp	r3, #0
 800073e:	da04      	bge.n	800074a <_puts_r+0x86>
 8000740:	69a2      	ldr	r2, [r4, #24]
 8000742:	429a      	cmp	r2, r3
 8000744:	dc06      	bgt.n	8000754 <_puts_r+0x90>
 8000746:	290a      	cmp	r1, #10
 8000748:	d004      	beq.n	8000754 <_puts_r+0x90>
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	6022      	str	r2, [r4, #0]
 8000750:	7019      	strb	r1, [r3, #0]
 8000752:	e7cf      	b.n	80006f4 <_puts_r+0x30>
 8000754:	4622      	mov	r2, r4
 8000756:	4628      	mov	r0, r5
 8000758:	f000 f818 	bl	800078c <__swbuf_r>
 800075c:	3001      	adds	r0, #1
 800075e:	d1c9      	bne.n	80006f4 <_puts_r+0x30>
 8000760:	e7e9      	b.n	8000736 <_puts_r+0x72>
 8000762:	6823      	ldr	r3, [r4, #0]
 8000764:	200a      	movs	r0, #10
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	6022      	str	r2, [r4, #0]
 800076a:	7018      	strb	r0, [r3, #0]
 800076c:	e7e5      	b.n	800073a <_puts_r+0x76>
 800076e:	bf00      	nop
 8000770:	0800101c 	.word	0x0800101c
 8000774:	0800103c 	.word	0x0800103c
 8000778:	08000ffc 	.word	0x08000ffc

0800077c <puts>:
 800077c:	4b02      	ldr	r3, [pc, #8]	; (8000788 <puts+0xc>)
 800077e:	4601      	mov	r1, r0
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	f7ff bf9f 	b.w	80006c4 <_puts_r>
 8000786:	bf00      	nop
 8000788:	20000010 	.word	0x20000010

0800078c <__swbuf_r>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	460e      	mov	r6, r1
 8000790:	4614      	mov	r4, r2
 8000792:	4605      	mov	r5, r0
 8000794:	b118      	cbz	r0, 800079e <__swbuf_r+0x12>
 8000796:	6983      	ldr	r3, [r0, #24]
 8000798:	b90b      	cbnz	r3, 800079e <__swbuf_r+0x12>
 800079a:	f000 f9a7 	bl	8000aec <__sinit>
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <__swbuf_r+0x98>)
 80007a0:	429c      	cmp	r4, r3
 80007a2:	d12a      	bne.n	80007fa <__swbuf_r+0x6e>
 80007a4:	686c      	ldr	r4, [r5, #4]
 80007a6:	69a3      	ldr	r3, [r4, #24]
 80007a8:	60a3      	str	r3, [r4, #8]
 80007aa:	89a3      	ldrh	r3, [r4, #12]
 80007ac:	071a      	lsls	r2, r3, #28
 80007ae:	d52e      	bpl.n	800080e <__swbuf_r+0x82>
 80007b0:	6923      	ldr	r3, [r4, #16]
 80007b2:	b363      	cbz	r3, 800080e <__swbuf_r+0x82>
 80007b4:	6923      	ldr	r3, [r4, #16]
 80007b6:	6820      	ldr	r0, [r4, #0]
 80007b8:	1ac0      	subs	r0, r0, r3
 80007ba:	6963      	ldr	r3, [r4, #20]
 80007bc:	b2f6      	uxtb	r6, r6
 80007be:	4283      	cmp	r3, r0
 80007c0:	4637      	mov	r7, r6
 80007c2:	dc04      	bgt.n	80007ce <__swbuf_r+0x42>
 80007c4:	4621      	mov	r1, r4
 80007c6:	4628      	mov	r0, r5
 80007c8:	f000 f926 	bl	8000a18 <_fflush_r>
 80007cc:	bb28      	cbnz	r0, 800081a <__swbuf_r+0x8e>
 80007ce:	68a3      	ldr	r3, [r4, #8]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	60a3      	str	r3, [r4, #8]
 80007d4:	6823      	ldr	r3, [r4, #0]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	6022      	str	r2, [r4, #0]
 80007da:	701e      	strb	r6, [r3, #0]
 80007dc:	6963      	ldr	r3, [r4, #20]
 80007de:	3001      	adds	r0, #1
 80007e0:	4283      	cmp	r3, r0
 80007e2:	d004      	beq.n	80007ee <__swbuf_r+0x62>
 80007e4:	89a3      	ldrh	r3, [r4, #12]
 80007e6:	07db      	lsls	r3, r3, #31
 80007e8:	d519      	bpl.n	800081e <__swbuf_r+0x92>
 80007ea:	2e0a      	cmp	r6, #10
 80007ec:	d117      	bne.n	800081e <__swbuf_r+0x92>
 80007ee:	4621      	mov	r1, r4
 80007f0:	4628      	mov	r0, r5
 80007f2:	f000 f911 	bl	8000a18 <_fflush_r>
 80007f6:	b190      	cbz	r0, 800081e <__swbuf_r+0x92>
 80007f8:	e00f      	b.n	800081a <__swbuf_r+0x8e>
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <__swbuf_r+0x9c>)
 80007fc:	429c      	cmp	r4, r3
 80007fe:	d101      	bne.n	8000804 <__swbuf_r+0x78>
 8000800:	68ac      	ldr	r4, [r5, #8]
 8000802:	e7d0      	b.n	80007a6 <__swbuf_r+0x1a>
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <__swbuf_r+0xa0>)
 8000806:	429c      	cmp	r4, r3
 8000808:	bf08      	it	eq
 800080a:	68ec      	ldreq	r4, [r5, #12]
 800080c:	e7cb      	b.n	80007a6 <__swbuf_r+0x1a>
 800080e:	4621      	mov	r1, r4
 8000810:	4628      	mov	r0, r5
 8000812:	f000 f80d 	bl	8000830 <__swsetup_r>
 8000816:	2800      	cmp	r0, #0
 8000818:	d0cc      	beq.n	80007b4 <__swbuf_r+0x28>
 800081a:	f04f 37ff 	mov.w	r7, #4294967295
 800081e:	4638      	mov	r0, r7
 8000820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000822:	bf00      	nop
 8000824:	0800101c 	.word	0x0800101c
 8000828:	0800103c 	.word	0x0800103c
 800082c:	08000ffc 	.word	0x08000ffc

08000830 <__swsetup_r>:
 8000830:	4b32      	ldr	r3, [pc, #200]	; (80008fc <__swsetup_r+0xcc>)
 8000832:	b570      	push	{r4, r5, r6, lr}
 8000834:	681d      	ldr	r5, [r3, #0]
 8000836:	4606      	mov	r6, r0
 8000838:	460c      	mov	r4, r1
 800083a:	b125      	cbz	r5, 8000846 <__swsetup_r+0x16>
 800083c:	69ab      	ldr	r3, [r5, #24]
 800083e:	b913      	cbnz	r3, 8000846 <__swsetup_r+0x16>
 8000840:	4628      	mov	r0, r5
 8000842:	f000 f953 	bl	8000aec <__sinit>
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <__swsetup_r+0xd0>)
 8000848:	429c      	cmp	r4, r3
 800084a:	d10f      	bne.n	800086c <__swsetup_r+0x3c>
 800084c:	686c      	ldr	r4, [r5, #4]
 800084e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000852:	b29a      	uxth	r2, r3
 8000854:	0715      	lsls	r5, r2, #28
 8000856:	d42c      	bmi.n	80008b2 <__swsetup_r+0x82>
 8000858:	06d0      	lsls	r0, r2, #27
 800085a:	d411      	bmi.n	8000880 <__swsetup_r+0x50>
 800085c:	2209      	movs	r2, #9
 800085e:	6032      	str	r2, [r6, #0]
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	81a3      	strh	r3, [r4, #12]
 8000866:	f04f 30ff 	mov.w	r0, #4294967295
 800086a:	e03e      	b.n	80008ea <__swsetup_r+0xba>
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <__swsetup_r+0xd4>)
 800086e:	429c      	cmp	r4, r3
 8000870:	d101      	bne.n	8000876 <__swsetup_r+0x46>
 8000872:	68ac      	ldr	r4, [r5, #8]
 8000874:	e7eb      	b.n	800084e <__swsetup_r+0x1e>
 8000876:	4b24      	ldr	r3, [pc, #144]	; (8000908 <__swsetup_r+0xd8>)
 8000878:	429c      	cmp	r4, r3
 800087a:	bf08      	it	eq
 800087c:	68ec      	ldreq	r4, [r5, #12]
 800087e:	e7e6      	b.n	800084e <__swsetup_r+0x1e>
 8000880:	0751      	lsls	r1, r2, #29
 8000882:	d512      	bpl.n	80008aa <__swsetup_r+0x7a>
 8000884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000886:	b141      	cbz	r1, 800089a <__swsetup_r+0x6a>
 8000888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800088c:	4299      	cmp	r1, r3
 800088e:	d002      	beq.n	8000896 <__swsetup_r+0x66>
 8000890:	4630      	mov	r0, r6
 8000892:	f000 fa19 	bl	8000cc8 <_free_r>
 8000896:	2300      	movs	r3, #0
 8000898:	6363      	str	r3, [r4, #52]	; 0x34
 800089a:	89a3      	ldrh	r3, [r4, #12]
 800089c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008a0:	81a3      	strh	r3, [r4, #12]
 80008a2:	2300      	movs	r3, #0
 80008a4:	6063      	str	r3, [r4, #4]
 80008a6:	6923      	ldr	r3, [r4, #16]
 80008a8:	6023      	str	r3, [r4, #0]
 80008aa:	89a3      	ldrh	r3, [r4, #12]
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	81a3      	strh	r3, [r4, #12]
 80008b2:	6923      	ldr	r3, [r4, #16]
 80008b4:	b94b      	cbnz	r3, 80008ca <__swsetup_r+0x9a>
 80008b6:	89a3      	ldrh	r3, [r4, #12]
 80008b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008c0:	d003      	beq.n	80008ca <__swsetup_r+0x9a>
 80008c2:	4621      	mov	r1, r4
 80008c4:	4630      	mov	r0, r6
 80008c6:	f000 f9bf 	bl	8000c48 <__smakebuf_r>
 80008ca:	89a2      	ldrh	r2, [r4, #12]
 80008cc:	f012 0301 	ands.w	r3, r2, #1
 80008d0:	d00c      	beq.n	80008ec <__swsetup_r+0xbc>
 80008d2:	2300      	movs	r3, #0
 80008d4:	60a3      	str	r3, [r4, #8]
 80008d6:	6963      	ldr	r3, [r4, #20]
 80008d8:	425b      	negs	r3, r3
 80008da:	61a3      	str	r3, [r4, #24]
 80008dc:	6923      	ldr	r3, [r4, #16]
 80008de:	b953      	cbnz	r3, 80008f6 <__swsetup_r+0xc6>
 80008e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80008e8:	d1ba      	bne.n	8000860 <__swsetup_r+0x30>
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	0792      	lsls	r2, r2, #30
 80008ee:	bf58      	it	pl
 80008f0:	6963      	ldrpl	r3, [r4, #20]
 80008f2:	60a3      	str	r3, [r4, #8]
 80008f4:	e7f2      	b.n	80008dc <__swsetup_r+0xac>
 80008f6:	2000      	movs	r0, #0
 80008f8:	e7f7      	b.n	80008ea <__swsetup_r+0xba>
 80008fa:	bf00      	nop
 80008fc:	20000010 	.word	0x20000010
 8000900:	0800101c 	.word	0x0800101c
 8000904:	0800103c 	.word	0x0800103c
 8000908:	08000ffc 	.word	0x08000ffc

0800090c <__sflush_r>:
 800090c:	898a      	ldrh	r2, [r1, #12]
 800090e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000912:	4605      	mov	r5, r0
 8000914:	0710      	lsls	r0, r2, #28
 8000916:	460c      	mov	r4, r1
 8000918:	d458      	bmi.n	80009cc <__sflush_r+0xc0>
 800091a:	684b      	ldr	r3, [r1, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	dc05      	bgt.n	800092c <__sflush_r+0x20>
 8000920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000922:	2b00      	cmp	r3, #0
 8000924:	dc02      	bgt.n	800092c <__sflush_r+0x20>
 8000926:	2000      	movs	r0, #0
 8000928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800092c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800092e:	2e00      	cmp	r6, #0
 8000930:	d0f9      	beq.n	8000926 <__sflush_r+0x1a>
 8000932:	2300      	movs	r3, #0
 8000934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000938:	682f      	ldr	r7, [r5, #0]
 800093a:	6a21      	ldr	r1, [r4, #32]
 800093c:	602b      	str	r3, [r5, #0]
 800093e:	d032      	beq.n	80009a6 <__sflush_r+0x9a>
 8000940:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000942:	89a3      	ldrh	r3, [r4, #12]
 8000944:	075a      	lsls	r2, r3, #29
 8000946:	d505      	bpl.n	8000954 <__sflush_r+0x48>
 8000948:	6863      	ldr	r3, [r4, #4]
 800094a:	1ac0      	subs	r0, r0, r3
 800094c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800094e:	b10b      	cbz	r3, 8000954 <__sflush_r+0x48>
 8000950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000952:	1ac0      	subs	r0, r0, r3
 8000954:	2300      	movs	r3, #0
 8000956:	4602      	mov	r2, r0
 8000958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800095a:	6a21      	ldr	r1, [r4, #32]
 800095c:	4628      	mov	r0, r5
 800095e:	47b0      	blx	r6
 8000960:	1c43      	adds	r3, r0, #1
 8000962:	89a3      	ldrh	r3, [r4, #12]
 8000964:	d106      	bne.n	8000974 <__sflush_r+0x68>
 8000966:	6829      	ldr	r1, [r5, #0]
 8000968:	291d      	cmp	r1, #29
 800096a:	d848      	bhi.n	80009fe <__sflush_r+0xf2>
 800096c:	4a29      	ldr	r2, [pc, #164]	; (8000a14 <__sflush_r+0x108>)
 800096e:	40ca      	lsrs	r2, r1
 8000970:	07d6      	lsls	r6, r2, #31
 8000972:	d544      	bpl.n	80009fe <__sflush_r+0xf2>
 8000974:	2200      	movs	r2, #0
 8000976:	6062      	str	r2, [r4, #4]
 8000978:	04d9      	lsls	r1, r3, #19
 800097a:	6922      	ldr	r2, [r4, #16]
 800097c:	6022      	str	r2, [r4, #0]
 800097e:	d504      	bpl.n	800098a <__sflush_r+0x7e>
 8000980:	1c42      	adds	r2, r0, #1
 8000982:	d101      	bne.n	8000988 <__sflush_r+0x7c>
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	b903      	cbnz	r3, 800098a <__sflush_r+0x7e>
 8000988:	6560      	str	r0, [r4, #84]	; 0x54
 800098a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800098c:	602f      	str	r7, [r5, #0]
 800098e:	2900      	cmp	r1, #0
 8000990:	d0c9      	beq.n	8000926 <__sflush_r+0x1a>
 8000992:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000996:	4299      	cmp	r1, r3
 8000998:	d002      	beq.n	80009a0 <__sflush_r+0x94>
 800099a:	4628      	mov	r0, r5
 800099c:	f000 f994 	bl	8000cc8 <_free_r>
 80009a0:	2000      	movs	r0, #0
 80009a2:	6360      	str	r0, [r4, #52]	; 0x34
 80009a4:	e7c0      	b.n	8000928 <__sflush_r+0x1c>
 80009a6:	2301      	movs	r3, #1
 80009a8:	4628      	mov	r0, r5
 80009aa:	47b0      	blx	r6
 80009ac:	1c41      	adds	r1, r0, #1
 80009ae:	d1c8      	bne.n	8000942 <__sflush_r+0x36>
 80009b0:	682b      	ldr	r3, [r5, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0c5      	beq.n	8000942 <__sflush_r+0x36>
 80009b6:	2b1d      	cmp	r3, #29
 80009b8:	d001      	beq.n	80009be <__sflush_r+0xb2>
 80009ba:	2b16      	cmp	r3, #22
 80009bc:	d101      	bne.n	80009c2 <__sflush_r+0xb6>
 80009be:	602f      	str	r7, [r5, #0]
 80009c0:	e7b1      	b.n	8000926 <__sflush_r+0x1a>
 80009c2:	89a3      	ldrh	r3, [r4, #12]
 80009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c8:	81a3      	strh	r3, [r4, #12]
 80009ca:	e7ad      	b.n	8000928 <__sflush_r+0x1c>
 80009cc:	690f      	ldr	r7, [r1, #16]
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d0a9      	beq.n	8000926 <__sflush_r+0x1a>
 80009d2:	0793      	lsls	r3, r2, #30
 80009d4:	680e      	ldr	r6, [r1, #0]
 80009d6:	bf08      	it	eq
 80009d8:	694b      	ldreq	r3, [r1, #20]
 80009da:	600f      	str	r7, [r1, #0]
 80009dc:	bf18      	it	ne
 80009de:	2300      	movne	r3, #0
 80009e0:	eba6 0807 	sub.w	r8, r6, r7
 80009e4:	608b      	str	r3, [r1, #8]
 80009e6:	f1b8 0f00 	cmp.w	r8, #0
 80009ea:	dd9c      	ble.n	8000926 <__sflush_r+0x1a>
 80009ec:	4643      	mov	r3, r8
 80009ee:	463a      	mov	r2, r7
 80009f0:	6a21      	ldr	r1, [r4, #32]
 80009f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009f4:	4628      	mov	r0, r5
 80009f6:	47b0      	blx	r6
 80009f8:	2800      	cmp	r0, #0
 80009fa:	dc06      	bgt.n	8000a0a <__sflush_r+0xfe>
 80009fc:	89a3      	ldrh	r3, [r4, #12]
 80009fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a02:	81a3      	strh	r3, [r4, #12]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	e78e      	b.n	8000928 <__sflush_r+0x1c>
 8000a0a:	4407      	add	r7, r0
 8000a0c:	eba8 0800 	sub.w	r8, r8, r0
 8000a10:	e7e9      	b.n	80009e6 <__sflush_r+0xda>
 8000a12:	bf00      	nop
 8000a14:	20400001 	.word	0x20400001

08000a18 <_fflush_r>:
 8000a18:	b538      	push	{r3, r4, r5, lr}
 8000a1a:	690b      	ldr	r3, [r1, #16]
 8000a1c:	4605      	mov	r5, r0
 8000a1e:	460c      	mov	r4, r1
 8000a20:	b1db      	cbz	r3, 8000a5a <_fflush_r+0x42>
 8000a22:	b118      	cbz	r0, 8000a2c <_fflush_r+0x14>
 8000a24:	6983      	ldr	r3, [r0, #24]
 8000a26:	b90b      	cbnz	r3, 8000a2c <_fflush_r+0x14>
 8000a28:	f000 f860 	bl	8000aec <__sinit>
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <_fflush_r+0x48>)
 8000a2e:	429c      	cmp	r4, r3
 8000a30:	d109      	bne.n	8000a46 <_fflush_r+0x2e>
 8000a32:	686c      	ldr	r4, [r5, #4]
 8000a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a38:	b17b      	cbz	r3, 8000a5a <_fflush_r+0x42>
 8000a3a:	4621      	mov	r1, r4
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a42:	f7ff bf63 	b.w	800090c <__sflush_r>
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <_fflush_r+0x4c>)
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	d101      	bne.n	8000a50 <_fflush_r+0x38>
 8000a4c:	68ac      	ldr	r4, [r5, #8]
 8000a4e:	e7f1      	b.n	8000a34 <_fflush_r+0x1c>
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <_fflush_r+0x50>)
 8000a52:	429c      	cmp	r4, r3
 8000a54:	bf08      	it	eq
 8000a56:	68ec      	ldreq	r4, [r5, #12]
 8000a58:	e7ec      	b.n	8000a34 <_fflush_r+0x1c>
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	bd38      	pop	{r3, r4, r5, pc}
 8000a5e:	bf00      	nop
 8000a60:	0800101c 	.word	0x0800101c
 8000a64:	0800103c 	.word	0x0800103c
 8000a68:	08000ffc 	.word	0x08000ffc

08000a6c <std>:
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	b510      	push	{r4, lr}
 8000a70:	4604      	mov	r4, r0
 8000a72:	e9c0 3300 	strd	r3, r3, [r0]
 8000a76:	6083      	str	r3, [r0, #8]
 8000a78:	8181      	strh	r1, [r0, #12]
 8000a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8000a7c:	81c2      	strh	r2, [r0, #14]
 8000a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a82:	6183      	str	r3, [r0, #24]
 8000a84:	4619      	mov	r1, r3
 8000a86:	2208      	movs	r2, #8
 8000a88:	305c      	adds	r0, #92	; 0x5c
 8000a8a:	f7ff fe13 	bl	80006b4 <memset>
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <std+0x38>)
 8000a90:	6263      	str	r3, [r4, #36]	; 0x24
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <std+0x3c>)
 8000a94:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <std+0x40>)
 8000a98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <std+0x44>)
 8000a9c:	6224      	str	r4, [r4, #32]
 8000a9e:	6323      	str	r3, [r4, #48]	; 0x30
 8000aa0:	bd10      	pop	{r4, pc}
 8000aa2:	bf00      	nop
 8000aa4:	08000e39 	.word	0x08000e39
 8000aa8:	08000e5b 	.word	0x08000e5b
 8000aac:	08000e93 	.word	0x08000e93
 8000ab0:	08000eb7 	.word	0x08000eb7

08000ab4 <_cleanup_r>:
 8000ab4:	4901      	ldr	r1, [pc, #4]	; (8000abc <_cleanup_r+0x8>)
 8000ab6:	f000 b885 	b.w	8000bc4 <_fwalk_reent>
 8000aba:	bf00      	nop
 8000abc:	08000a19 	.word	0x08000a19

08000ac0 <__sfmoreglue>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	1e4a      	subs	r2, r1, #1
 8000ac4:	2568      	movs	r5, #104	; 0x68
 8000ac6:	4355      	muls	r5, r2
 8000ac8:	460e      	mov	r6, r1
 8000aca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000ace:	f000 f949 	bl	8000d64 <_malloc_r>
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	b140      	cbz	r0, 8000ae8 <__sfmoreglue+0x28>
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e9c0 1600 	strd	r1, r6, [r0]
 8000adc:	300c      	adds	r0, #12
 8000ade:	60a0      	str	r0, [r4, #8]
 8000ae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000ae4:	f7ff fde6 	bl	80006b4 <memset>
 8000ae8:	4620      	mov	r0, r4
 8000aea:	bd70      	pop	{r4, r5, r6, pc}

08000aec <__sinit>:
 8000aec:	6983      	ldr	r3, [r0, #24]
 8000aee:	b510      	push	{r4, lr}
 8000af0:	4604      	mov	r4, r0
 8000af2:	bb33      	cbnz	r3, 8000b42 <__sinit+0x56>
 8000af4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000af8:	6503      	str	r3, [r0, #80]	; 0x50
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <__sinit+0x58>)
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <__sinit+0x5c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6282      	str	r2, [r0, #40]	; 0x28
 8000b02:	4298      	cmp	r0, r3
 8000b04:	bf04      	itt	eq
 8000b06:	2301      	moveq	r3, #1
 8000b08:	6183      	streq	r3, [r0, #24]
 8000b0a:	f000 f81f 	bl	8000b4c <__sfp>
 8000b0e:	6060      	str	r0, [r4, #4]
 8000b10:	4620      	mov	r0, r4
 8000b12:	f000 f81b 	bl	8000b4c <__sfp>
 8000b16:	60a0      	str	r0, [r4, #8]
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f000 f817 	bl	8000b4c <__sfp>
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60e0      	str	r0, [r4, #12]
 8000b22:	2104      	movs	r1, #4
 8000b24:	6860      	ldr	r0, [r4, #4]
 8000b26:	f7ff ffa1 	bl	8000a6c <std>
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2109      	movs	r1, #9
 8000b2e:	68a0      	ldr	r0, [r4, #8]
 8000b30:	f7ff ff9c 	bl	8000a6c <std>
 8000b34:	2202      	movs	r2, #2
 8000b36:	2112      	movs	r1, #18
 8000b38:	68e0      	ldr	r0, [r4, #12]
 8000b3a:	f7ff ff97 	bl	8000a6c <std>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61a3      	str	r3, [r4, #24]
 8000b42:	bd10      	pop	{r4, pc}
 8000b44:	08000ff8 	.word	0x08000ff8
 8000b48:	08000ab5 	.word	0x08000ab5

08000b4c <__sfp>:
 8000b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <__sfp+0x70>)
 8000b50:	681e      	ldr	r6, [r3, #0]
 8000b52:	69b3      	ldr	r3, [r6, #24]
 8000b54:	4607      	mov	r7, r0
 8000b56:	b913      	cbnz	r3, 8000b5e <__sfp+0x12>
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f7ff ffc7 	bl	8000aec <__sinit>
 8000b5e:	3648      	adds	r6, #72	; 0x48
 8000b60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	d503      	bpl.n	8000b70 <__sfp+0x24>
 8000b68:	6833      	ldr	r3, [r6, #0]
 8000b6a:	b133      	cbz	r3, 8000b7a <__sfp+0x2e>
 8000b6c:	6836      	ldr	r6, [r6, #0]
 8000b6e:	e7f7      	b.n	8000b60 <__sfp+0x14>
 8000b70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b74:	b16d      	cbz	r5, 8000b92 <__sfp+0x46>
 8000b76:	3468      	adds	r4, #104	; 0x68
 8000b78:	e7f4      	b.n	8000b64 <__sfp+0x18>
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	4638      	mov	r0, r7
 8000b7e:	f7ff ff9f 	bl	8000ac0 <__sfmoreglue>
 8000b82:	6030      	str	r0, [r6, #0]
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d1f1      	bne.n	8000b6c <__sfp+0x20>
 8000b88:	230c      	movs	r3, #12
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	4620      	mov	r0, r4
 8000b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <__sfp+0x74>)
 8000b94:	6665      	str	r5, [r4, #100]	; 0x64
 8000b96:	e9c4 5500 	strd	r5, r5, [r4]
 8000b9a:	60a5      	str	r5, [r4, #8]
 8000b9c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000ba0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000ba4:	2208      	movs	r2, #8
 8000ba6:	4629      	mov	r1, r5
 8000ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bac:	f7ff fd82 	bl	80006b4 <memset>
 8000bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bb8:	e7e9      	b.n	8000b8e <__sfp+0x42>
 8000bba:	bf00      	nop
 8000bbc:	08000ff8 	.word	0x08000ff8
 8000bc0:	ffff0001 	.word	0xffff0001

08000bc4 <_fwalk_reent>:
 8000bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bc8:	4680      	mov	r8, r0
 8000bca:	4689      	mov	r9, r1
 8000bcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	b914      	cbnz	r4, 8000bda <_fwalk_reent+0x16>
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bda:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000bde:	3f01      	subs	r7, #1
 8000be0:	d501      	bpl.n	8000be6 <_fwalk_reent+0x22>
 8000be2:	6824      	ldr	r4, [r4, #0]
 8000be4:	e7f5      	b.n	8000bd2 <_fwalk_reent+0xe>
 8000be6:	89ab      	ldrh	r3, [r5, #12]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d907      	bls.n	8000bfc <_fwalk_reent+0x38>
 8000bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	d003      	beq.n	8000bfc <_fwalk_reent+0x38>
 8000bf4:	4629      	mov	r1, r5
 8000bf6:	4640      	mov	r0, r8
 8000bf8:	47c8      	blx	r9
 8000bfa:	4306      	orrs	r6, r0
 8000bfc:	3568      	adds	r5, #104	; 0x68
 8000bfe:	e7ee      	b.n	8000bde <_fwalk_reent+0x1a>

08000c00 <__swhatbuf_r>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	460e      	mov	r6, r1
 8000c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	b096      	sub	sp, #88	; 0x58
 8000c0c:	4614      	mov	r4, r2
 8000c0e:	461d      	mov	r5, r3
 8000c10:	da07      	bge.n	8000c22 <__swhatbuf_r+0x22>
 8000c12:	2300      	movs	r3, #0
 8000c14:	602b      	str	r3, [r5, #0]
 8000c16:	89b3      	ldrh	r3, [r6, #12]
 8000c18:	061a      	lsls	r2, r3, #24
 8000c1a:	d410      	bmi.n	8000c3e <__swhatbuf_r+0x3e>
 8000c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c20:	e00e      	b.n	8000c40 <__swhatbuf_r+0x40>
 8000c22:	466a      	mov	r2, sp
 8000c24:	f000 f96e 	bl	8000f04 <_fstat_r>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	dbf2      	blt.n	8000c12 <__swhatbuf_r+0x12>
 8000c2c:	9a01      	ldr	r2, [sp, #4]
 8000c2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c36:	425a      	negs	r2, r3
 8000c38:	415a      	adcs	r2, r3
 8000c3a:	602a      	str	r2, [r5, #0]
 8000c3c:	e7ee      	b.n	8000c1c <__swhatbuf_r+0x1c>
 8000c3e:	2340      	movs	r3, #64	; 0x40
 8000c40:	2000      	movs	r0, #0
 8000c42:	6023      	str	r3, [r4, #0]
 8000c44:	b016      	add	sp, #88	; 0x58
 8000c46:	bd70      	pop	{r4, r5, r6, pc}

08000c48 <__smakebuf_r>:
 8000c48:	898b      	ldrh	r3, [r1, #12]
 8000c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c4c:	079d      	lsls	r5, r3, #30
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460c      	mov	r4, r1
 8000c52:	d507      	bpl.n	8000c64 <__smakebuf_r+0x1c>
 8000c54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c58:	6023      	str	r3, [r4, #0]
 8000c5a:	6123      	str	r3, [r4, #16]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	6163      	str	r3, [r4, #20]
 8000c60:	b002      	add	sp, #8
 8000c62:	bd70      	pop	{r4, r5, r6, pc}
 8000c64:	ab01      	add	r3, sp, #4
 8000c66:	466a      	mov	r2, sp
 8000c68:	f7ff ffca 	bl	8000c00 <__swhatbuf_r>
 8000c6c:	9900      	ldr	r1, [sp, #0]
 8000c6e:	4605      	mov	r5, r0
 8000c70:	4630      	mov	r0, r6
 8000c72:	f000 f877 	bl	8000d64 <_malloc_r>
 8000c76:	b948      	cbnz	r0, 8000c8c <__smakebuf_r+0x44>
 8000c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c7c:	059a      	lsls	r2, r3, #22
 8000c7e:	d4ef      	bmi.n	8000c60 <__smakebuf_r+0x18>
 8000c80:	f023 0303 	bic.w	r3, r3, #3
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	81a3      	strh	r3, [r4, #12]
 8000c8a:	e7e3      	b.n	8000c54 <__smakebuf_r+0xc>
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <__smakebuf_r+0x7c>)
 8000c8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c90:	89a3      	ldrh	r3, [r4, #12]
 8000c92:	6020      	str	r0, [r4, #0]
 8000c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c98:	81a3      	strh	r3, [r4, #12]
 8000c9a:	9b00      	ldr	r3, [sp, #0]
 8000c9c:	6163      	str	r3, [r4, #20]
 8000c9e:	9b01      	ldr	r3, [sp, #4]
 8000ca0:	6120      	str	r0, [r4, #16]
 8000ca2:	b15b      	cbz	r3, 8000cbc <__smakebuf_r+0x74>
 8000ca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ca8:	4630      	mov	r0, r6
 8000caa:	f000 f93d 	bl	8000f28 <_isatty_r>
 8000cae:	b128      	cbz	r0, 8000cbc <__smakebuf_r+0x74>
 8000cb0:	89a3      	ldrh	r3, [r4, #12]
 8000cb2:	f023 0303 	bic.w	r3, r3, #3
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	81a3      	strh	r3, [r4, #12]
 8000cbc:	89a3      	ldrh	r3, [r4, #12]
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	81a5      	strh	r5, [r4, #12]
 8000cc2:	e7cd      	b.n	8000c60 <__smakebuf_r+0x18>
 8000cc4:	08000ab5 	.word	0x08000ab5

08000cc8 <_free_r>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	4605      	mov	r5, r0
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d045      	beq.n	8000d5c <_free_r+0x94>
 8000cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cd4:	1f0c      	subs	r4, r1, #4
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bfb8      	it	lt
 8000cda:	18e4      	addlt	r4, r4, r3
 8000cdc:	f000 f946 	bl	8000f6c <__malloc_lock>
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <_free_r+0x98>)
 8000ce2:	6813      	ldr	r3, [r2, #0]
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	b933      	cbnz	r3, 8000cf6 <_free_r+0x2e>
 8000ce8:	6063      	str	r3, [r4, #4]
 8000cea:	6014      	str	r4, [r2, #0]
 8000cec:	4628      	mov	r0, r5
 8000cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf2:	f000 b93c 	b.w	8000f6e <__malloc_unlock>
 8000cf6:	42a3      	cmp	r3, r4
 8000cf8:	d90c      	bls.n	8000d14 <_free_r+0x4c>
 8000cfa:	6821      	ldr	r1, [r4, #0]
 8000cfc:	1862      	adds	r2, r4, r1
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	bf04      	itt	eq
 8000d02:	681a      	ldreq	r2, [r3, #0]
 8000d04:	685b      	ldreq	r3, [r3, #4]
 8000d06:	6063      	str	r3, [r4, #4]
 8000d08:	bf04      	itt	eq
 8000d0a:	1852      	addeq	r2, r2, r1
 8000d0c:	6022      	streq	r2, [r4, #0]
 8000d0e:	6004      	str	r4, [r0, #0]
 8000d10:	e7ec      	b.n	8000cec <_free_r+0x24>
 8000d12:	4613      	mov	r3, r2
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	b10a      	cbz	r2, 8000d1c <_free_r+0x54>
 8000d18:	42a2      	cmp	r2, r4
 8000d1a:	d9fa      	bls.n	8000d12 <_free_r+0x4a>
 8000d1c:	6819      	ldr	r1, [r3, #0]
 8000d1e:	1858      	adds	r0, r3, r1
 8000d20:	42a0      	cmp	r0, r4
 8000d22:	d10b      	bne.n	8000d3c <_free_r+0x74>
 8000d24:	6820      	ldr	r0, [r4, #0]
 8000d26:	4401      	add	r1, r0
 8000d28:	1858      	adds	r0, r3, r1
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	6019      	str	r1, [r3, #0]
 8000d2e:	d1dd      	bne.n	8000cec <_free_r+0x24>
 8000d30:	6810      	ldr	r0, [r2, #0]
 8000d32:	6852      	ldr	r2, [r2, #4]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	4401      	add	r1, r0
 8000d38:	6019      	str	r1, [r3, #0]
 8000d3a:	e7d7      	b.n	8000cec <_free_r+0x24>
 8000d3c:	d902      	bls.n	8000d44 <_free_r+0x7c>
 8000d3e:	230c      	movs	r3, #12
 8000d40:	602b      	str	r3, [r5, #0]
 8000d42:	e7d3      	b.n	8000cec <_free_r+0x24>
 8000d44:	6820      	ldr	r0, [r4, #0]
 8000d46:	1821      	adds	r1, r4, r0
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	bf04      	itt	eq
 8000d4c:	6811      	ldreq	r1, [r2, #0]
 8000d4e:	6852      	ldreq	r2, [r2, #4]
 8000d50:	6062      	str	r2, [r4, #4]
 8000d52:	bf04      	itt	eq
 8000d54:	1809      	addeq	r1, r1, r0
 8000d56:	6021      	streq	r1, [r4, #0]
 8000d58:	605c      	str	r4, [r3, #4]
 8000d5a:	e7c7      	b.n	8000cec <_free_r+0x24>
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000098 	.word	0x20000098

08000d64 <_malloc_r>:
 8000d64:	b570      	push	{r4, r5, r6, lr}
 8000d66:	1ccd      	adds	r5, r1, #3
 8000d68:	f025 0503 	bic.w	r5, r5, #3
 8000d6c:	3508      	adds	r5, #8
 8000d6e:	2d0c      	cmp	r5, #12
 8000d70:	bf38      	it	cc
 8000d72:	250c      	movcc	r5, #12
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	4606      	mov	r6, r0
 8000d78:	db01      	blt.n	8000d7e <_malloc_r+0x1a>
 8000d7a:	42a9      	cmp	r1, r5
 8000d7c:	d903      	bls.n	8000d86 <_malloc_r+0x22>
 8000d7e:	230c      	movs	r3, #12
 8000d80:	6033      	str	r3, [r6, #0]
 8000d82:	2000      	movs	r0, #0
 8000d84:	bd70      	pop	{r4, r5, r6, pc}
 8000d86:	f000 f8f1 	bl	8000f6c <__malloc_lock>
 8000d8a:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <_malloc_r+0xac>)
 8000d8c:	6814      	ldr	r4, [r2, #0]
 8000d8e:	4621      	mov	r1, r4
 8000d90:	b991      	cbnz	r1, 8000db8 <_malloc_r+0x54>
 8000d92:	4c20      	ldr	r4, [pc, #128]	; (8000e14 <_malloc_r+0xb0>)
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	b91b      	cbnz	r3, 8000da0 <_malloc_r+0x3c>
 8000d98:	4630      	mov	r0, r6
 8000d9a:	f000 f83d 	bl	8000e18 <_sbrk_r>
 8000d9e:	6020      	str	r0, [r4, #0]
 8000da0:	4629      	mov	r1, r5
 8000da2:	4630      	mov	r0, r6
 8000da4:	f000 f838 	bl	8000e18 <_sbrk_r>
 8000da8:	1c43      	adds	r3, r0, #1
 8000daa:	d124      	bne.n	8000df6 <_malloc_r+0x92>
 8000dac:	230c      	movs	r3, #12
 8000dae:	6033      	str	r3, [r6, #0]
 8000db0:	4630      	mov	r0, r6
 8000db2:	f000 f8dc 	bl	8000f6e <__malloc_unlock>
 8000db6:	e7e4      	b.n	8000d82 <_malloc_r+0x1e>
 8000db8:	680b      	ldr	r3, [r1, #0]
 8000dba:	1b5b      	subs	r3, r3, r5
 8000dbc:	d418      	bmi.n	8000df0 <_malloc_r+0x8c>
 8000dbe:	2b0b      	cmp	r3, #11
 8000dc0:	d90f      	bls.n	8000de2 <_malloc_r+0x7e>
 8000dc2:	600b      	str	r3, [r1, #0]
 8000dc4:	50cd      	str	r5, [r1, r3]
 8000dc6:	18cc      	adds	r4, r1, r3
 8000dc8:	4630      	mov	r0, r6
 8000dca:	f000 f8d0 	bl	8000f6e <__malloc_unlock>
 8000dce:	f104 000b 	add.w	r0, r4, #11
 8000dd2:	1d23      	adds	r3, r4, #4
 8000dd4:	f020 0007 	bic.w	r0, r0, #7
 8000dd8:	1ac3      	subs	r3, r0, r3
 8000dda:	d0d3      	beq.n	8000d84 <_malloc_r+0x20>
 8000ddc:	425a      	negs	r2, r3
 8000dde:	50e2      	str	r2, [r4, r3]
 8000de0:	e7d0      	b.n	8000d84 <_malloc_r+0x20>
 8000de2:	428c      	cmp	r4, r1
 8000de4:	684b      	ldr	r3, [r1, #4]
 8000de6:	bf16      	itet	ne
 8000de8:	6063      	strne	r3, [r4, #4]
 8000dea:	6013      	streq	r3, [r2, #0]
 8000dec:	460c      	movne	r4, r1
 8000dee:	e7eb      	b.n	8000dc8 <_malloc_r+0x64>
 8000df0:	460c      	mov	r4, r1
 8000df2:	6849      	ldr	r1, [r1, #4]
 8000df4:	e7cc      	b.n	8000d90 <_malloc_r+0x2c>
 8000df6:	1cc4      	adds	r4, r0, #3
 8000df8:	f024 0403 	bic.w	r4, r4, #3
 8000dfc:	42a0      	cmp	r0, r4
 8000dfe:	d005      	beq.n	8000e0c <_malloc_r+0xa8>
 8000e00:	1a21      	subs	r1, r4, r0
 8000e02:	4630      	mov	r0, r6
 8000e04:	f000 f808 	bl	8000e18 <_sbrk_r>
 8000e08:	3001      	adds	r0, #1
 8000e0a:	d0cf      	beq.n	8000dac <_malloc_r+0x48>
 8000e0c:	6025      	str	r5, [r4, #0]
 8000e0e:	e7db      	b.n	8000dc8 <_malloc_r+0x64>
 8000e10:	20000098 	.word	0x20000098
 8000e14:	2000009c 	.word	0x2000009c

08000e18 <_sbrk_r>:
 8000e18:	b538      	push	{r3, r4, r5, lr}
 8000e1a:	4c06      	ldr	r4, [pc, #24]	; (8000e34 <_sbrk_r+0x1c>)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4605      	mov	r5, r0
 8000e20:	4608      	mov	r0, r1
 8000e22:	6023      	str	r3, [r4, #0]
 8000e24:	f7ff fbbc 	bl	80005a0 <_sbrk>
 8000e28:	1c43      	adds	r3, r0, #1
 8000e2a:	d102      	bne.n	8000e32 <_sbrk_r+0x1a>
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	b103      	cbz	r3, 8000e32 <_sbrk_r+0x1a>
 8000e30:	602b      	str	r3, [r5, #0]
 8000e32:	bd38      	pop	{r3, r4, r5, pc}
 8000e34:	200000b0 	.word	0x200000b0

08000e38 <__sread>:
 8000e38:	b510      	push	{r4, lr}
 8000e3a:	460c      	mov	r4, r1
 8000e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e40:	f000 f896 	bl	8000f70 <_read_r>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	bfab      	itete	ge
 8000e48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8000e4c:	181b      	addge	r3, r3, r0
 8000e4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e52:	bfac      	ite	ge
 8000e54:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e56:	81a3      	strhlt	r3, [r4, #12]
 8000e58:	bd10      	pop	{r4, pc}

08000e5a <__swrite>:
 8000e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e5e:	461f      	mov	r7, r3
 8000e60:	898b      	ldrh	r3, [r1, #12]
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	4605      	mov	r5, r0
 8000e66:	460c      	mov	r4, r1
 8000e68:	4616      	mov	r6, r2
 8000e6a:	d505      	bpl.n	8000e78 <__swrite+0x1e>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e74:	f000 f868 	bl	8000f48 <_lseek_r>
 8000e78:	89a3      	ldrh	r3, [r4, #12]
 8000e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e82:	81a3      	strh	r3, [r4, #12]
 8000e84:	4632      	mov	r2, r6
 8000e86:	463b      	mov	r3, r7
 8000e88:	4628      	mov	r0, r5
 8000e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e8e:	f000 b817 	b.w	8000ec0 <_write_r>

08000e92 <__sseek>:
 8000e92:	b510      	push	{r4, lr}
 8000e94:	460c      	mov	r4, r1
 8000e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e9a:	f000 f855 	bl	8000f48 <_lseek_r>
 8000e9e:	1c43      	adds	r3, r0, #1
 8000ea0:	89a3      	ldrh	r3, [r4, #12]
 8000ea2:	bf15      	itete	ne
 8000ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000eae:	81a3      	strheq	r3, [r4, #12]
 8000eb0:	bf18      	it	ne
 8000eb2:	81a3      	strhne	r3, [r4, #12]
 8000eb4:	bd10      	pop	{r4, pc}

08000eb6 <__sclose>:
 8000eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eba:	f000 b813 	b.w	8000ee4 <_close_r>
	...

08000ec0 <_write_r>:
 8000ec0:	b538      	push	{r3, r4, r5, lr}
 8000ec2:	4c07      	ldr	r4, [pc, #28]	; (8000ee0 <_write_r+0x20>)
 8000ec4:	4605      	mov	r5, r0
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	4611      	mov	r1, r2
 8000eca:	2200      	movs	r2, #0
 8000ecc:	6022      	str	r2, [r4, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f7ff fb15 	bl	80004fe <_write>
 8000ed4:	1c43      	adds	r3, r0, #1
 8000ed6:	d102      	bne.n	8000ede <_write_r+0x1e>
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	b103      	cbz	r3, 8000ede <_write_r+0x1e>
 8000edc:	602b      	str	r3, [r5, #0]
 8000ede:	bd38      	pop	{r3, r4, r5, pc}
 8000ee0:	200000b0 	.word	0x200000b0

08000ee4 <_close_r>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	4c06      	ldr	r4, [pc, #24]	; (8000f00 <_close_r+0x1c>)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4605      	mov	r5, r0
 8000eec:	4608      	mov	r0, r1
 8000eee:	6023      	str	r3, [r4, #0]
 8000ef0:	f7ff fb21 	bl	8000536 <_close>
 8000ef4:	1c43      	adds	r3, r0, #1
 8000ef6:	d102      	bne.n	8000efe <_close_r+0x1a>
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	b103      	cbz	r3, 8000efe <_close_r+0x1a>
 8000efc:	602b      	str	r3, [r5, #0]
 8000efe:	bd38      	pop	{r3, r4, r5, pc}
 8000f00:	200000b0 	.word	0x200000b0

08000f04 <_fstat_r>:
 8000f04:	b538      	push	{r3, r4, r5, lr}
 8000f06:	4c07      	ldr	r4, [pc, #28]	; (8000f24 <_fstat_r+0x20>)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4605      	mov	r5, r0
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	4611      	mov	r1, r2
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	f7ff fb1c 	bl	800054e <_fstat>
 8000f16:	1c43      	adds	r3, r0, #1
 8000f18:	d102      	bne.n	8000f20 <_fstat_r+0x1c>
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	b103      	cbz	r3, 8000f20 <_fstat_r+0x1c>
 8000f1e:	602b      	str	r3, [r5, #0]
 8000f20:	bd38      	pop	{r3, r4, r5, pc}
 8000f22:	bf00      	nop
 8000f24:	200000b0 	.word	0x200000b0

08000f28 <_isatty_r>:
 8000f28:	b538      	push	{r3, r4, r5, lr}
 8000f2a:	4c06      	ldr	r4, [pc, #24]	; (8000f44 <_isatty_r+0x1c>)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	4605      	mov	r5, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	6023      	str	r3, [r4, #0]
 8000f34:	f7ff fb1b 	bl	800056e <_isatty>
 8000f38:	1c43      	adds	r3, r0, #1
 8000f3a:	d102      	bne.n	8000f42 <_isatty_r+0x1a>
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	b103      	cbz	r3, 8000f42 <_isatty_r+0x1a>
 8000f40:	602b      	str	r3, [r5, #0]
 8000f42:	bd38      	pop	{r3, r4, r5, pc}
 8000f44:	200000b0 	.word	0x200000b0

08000f48 <_lseek_r>:
 8000f48:	b538      	push	{r3, r4, r5, lr}
 8000f4a:	4c07      	ldr	r4, [pc, #28]	; (8000f68 <_lseek_r+0x20>)
 8000f4c:	4605      	mov	r5, r0
 8000f4e:	4608      	mov	r0, r1
 8000f50:	4611      	mov	r1, r2
 8000f52:	2200      	movs	r2, #0
 8000f54:	6022      	str	r2, [r4, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	f7ff fb14 	bl	8000584 <_lseek>
 8000f5c:	1c43      	adds	r3, r0, #1
 8000f5e:	d102      	bne.n	8000f66 <_lseek_r+0x1e>
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	b103      	cbz	r3, 8000f66 <_lseek_r+0x1e>
 8000f64:	602b      	str	r3, [r5, #0]
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
 8000f68:	200000b0 	.word	0x200000b0

08000f6c <__malloc_lock>:
 8000f6c:	4770      	bx	lr

08000f6e <__malloc_unlock>:
 8000f6e:	4770      	bx	lr

08000f70 <_read_r>:
 8000f70:	b538      	push	{r3, r4, r5, lr}
 8000f72:	4c07      	ldr	r4, [pc, #28]	; (8000f90 <_read_r+0x20>)
 8000f74:	4605      	mov	r5, r0
 8000f76:	4608      	mov	r0, r1
 8000f78:	4611      	mov	r1, r2
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	6022      	str	r2, [r4, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f7ff faa0 	bl	80004c4 <_read>
 8000f84:	1c43      	adds	r3, r0, #1
 8000f86:	d102      	bne.n	8000f8e <_read_r+0x1e>
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	b103      	cbz	r3, 8000f8e <_read_r+0x1e>
 8000f8c:	602b      	str	r3, [r5, #0]
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	200000b0 	.word	0x200000b0

08000f94 <_init>:
 8000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f96:	bf00      	nop
 8000f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9a:	bc08      	pop	{r3}
 8000f9c:	469e      	mov	lr, r3
 8000f9e:	4770      	bx	lr

08000fa0 <_fini>:
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa2:	bf00      	nop
 8000fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa6:	bc08      	pop	{r3}
 8000fa8:	469e      	mov	lr, r3
 8000faa:	4770      	bx	lr
