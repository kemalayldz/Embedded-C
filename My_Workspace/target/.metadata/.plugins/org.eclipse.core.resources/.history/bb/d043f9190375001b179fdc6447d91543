/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int32_t add_operator(int32_t x, int32_t y){

	int32_t res;
	__asm volatile("SVC #36");
	__asm volatile("MOV R0, %0"  : "=r" (res) :);
	return res;
}
int32_t divide_operator(int32_t x, int32_t y){

	int32_t res;
	__asm volatile("SVC #37");
	__asm volatile("MOV R0, %0"  : "=r" (res) :);
	return res;
}
int32_t multiple_operator(int32_t x, int32_t y){

	int32_t res;
	__asm volatile("SVC #38");
	__asm volatile("MOV R0, %0"  : "=r" (res) :);
	return res;
}
int32_t subtract_operator(int32_t x, int32_t y){

	int32_t res;
	__asm volatile("SVC #39");
	__asm volatile("MOV R0, %0"  : "=r" (res) :);
	return res;
}

int main(void)
{
	int32_t res = add_operator(20,30);
	printf("Result: %ld", res);

}
__attribute ((nacked)) void SVC_Handler(){

	__asm volatile("MRS R0, MSP");
	__asm volatile("B SVC_Handler_c ");
}

void SVC_Handler_c(uint32_t *pMPSholder){

	uint32_t arg0, arg1,res;

	uint8_t *pReturn_addr = (uint8_t*)pMPSholder[6];

	pReturn_addr-=2;

	uint8_t svc_number = *pReturn_addr;

	printf("Svc number is : %d\n",svc_number);

	arg0 = pMPSholder[0]; //R0
	arg1 = pMPSholder[1];

	switch(svc_number){

		case 36:
			res = arg0 + arg1;
			break;
		case 37:
			res = arg0 / arg1 ;
			break;
		case 38:
			res = arg0 * arg1;
			break;
		case 39:
			res = arg0 - arg1;
			break;
		default:
			printf("Invalid operation. \n");


	}
	res = pMPSholder[0];

}
