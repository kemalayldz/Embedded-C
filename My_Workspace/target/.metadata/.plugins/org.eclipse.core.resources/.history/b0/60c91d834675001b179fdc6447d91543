/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "main.h"


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);
void init_tasks_stack(void);

void init_systick_timer(uint32_t tick_hz);
__attribute ((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack);

uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START,T2_STACK_START,T3_STACK_START,T4_STACK_START};
uint32_t task_handlers[MAX_TASKS];
int main(void)
{
	init_scheduler_stack(SCHED_STACK_START);
	task_handlers[0] = (uint32_t) task1_handler;
	task_handlers[1] = (uint32_t) task2_handler;
	task_handlers[2] = (uint32_t) task3_handler;
	task_handlers[3] = (uint32_t) task4_handler;
	init_tasks_stack();

	init_systick_timer(TICK_HZ);

}

void task1_handler(void){
	while(1){
		printf("this is task1.\n");
	}

}
void task2_handler(void){

	while(1){
		printf("this is task2.\n");
	}
}

void task3_handler(void){
	while(1){
	printf("this is task1.\n");
	}
}

void task4_handler(void){

	while(1){
		printf("this is task1.\n");
	}
}
void init_systick_timer(uint32_t tick_hz){
	uint32_t *pSVR = (uint32_t*) 0xE000E014;
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz)-1;
	uint32_t *pCSR = (uint32_t*) 0xE000E010;

	//clear the of SVR
	*pSVR &=(0x00FFFFFFFF);

	//load the value into SVR

	*pSVR |= count_value;

	//Configure the CSR
	*pCSR |= (1<<1); //Enables the systick exception request
	*pCSR |= (1<<2); //Indicates the clock source; processor clock source
	*pCSR |= (1<<0); //enables the counter
}

__attribute ((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
	__asm volatile("MSR MSP,R0");
	__asm volatile("BX LR");

}

void init_tasks_stack(void){

	uint32_t *pPSP;
	for(int i = 0; i<MAX_TASKS; i++){
		pPSP = (uint32_t *) psp_of_tasks[i];
		pPSP--;
		*pPSP = DUMMY_XPSR;
		pPSP--; //PC
		*pPSP = task_handlers[i];
		pPSP--;
		*pPSP = 0xFFFFFFFD; //return address
		for(j = 0; j<13; j++){
			pPSP--;
			*pPSP = 0;
		}
		psp_of_tasks[i] = (uint32_t) pPSP;

	}


}
void SysTick_Handler(void){


}
