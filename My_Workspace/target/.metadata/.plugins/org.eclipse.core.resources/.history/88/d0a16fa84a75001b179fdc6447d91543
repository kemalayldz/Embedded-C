/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "main.h"


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);
void init_tasks_stack(void);
void enable_processor_faults(void);

void init_systick_timer(uint32_t tick_hz);
__attribute ((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack);
__attribute ((nacked)) void switch_sp_to_psp(void);
uint32_t get_psp_value(void);
__attribute((nacked)) void SysTick_Handler(void);

uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START,T2_STACK_START,T3_STACK_START,T4_STACK_START};
uint32_t task_handlers[MAX_TASKS];

uint8_t current_task = 0; //taks 1 is running
int main(void)
{

	enable_processor_faults();

	init_scheduler_stack(SCHED_STACK_START);

	task_handlers[0] = (uint32_t) task1_handler;
	task_handlers[1] = (uint32_t) task2_handler;
	task_handlers[2] = (uint32_t) task3_handler;
	task_handlers[3] = (uint32_t) task4_handler;
	init_tasks_stack();

	init_systick_timer(TICK_HZ);

	switch_sp_to_psp();


	task1_handler();

}

void task1_handler(void){
	while(1){
		printf("this is task1.\n");
	}

}
void task2_handler(void){

	while(1){
		printf("this is task2.\n");
	}
}

void task3_handler(void){
	while(1){
	printf("this is task1.\n");
	}
}

void task4_handler(void){

	while(1){
		printf("this is task1.\n");
	}
}
void init_systick_timer(uint32_t tick_hz){
	uint32_t *pSVR = (uint32_t*) 0xE000E014;
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz)-1;
	uint32_t *pCSR = (uint32_t*) 0xE000E010;

	//clear the of SVR
	*pSVR &=(0x00FFFFFFFF);

	//load the value into SVR

	*pSVR |= count_value;

	//Configure the CSR
	*pCSR |= (1<<1); //Enables the systick exception request
	*pCSR |= (1<<2); //Indicates the clock source; processor clock source
	*pCSR |= (1<<0); //enables the counter
}

__attribute ((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
	__asm volatile("MSR MSP,R0");
	__asm volatile("BX LR");

}

void init_tasks_stack(void){

	uint32_t *pPSP;
	for(int i = 0; i<MAX_TASKS; i++){
		pPSP = (uint32_t *) psp_of_tasks[i];
		pPSP--;
		*pPSP = DUMMY_XPSR;
		pPSP--; //PC
		*pPSP = task_handlers[i];
		pPSP--;
		*pPSP = 0xFFFFFFFD; //return address
		for(uint32_t j = 0; j<13; j++){
			pPSP--;
			*pPSP = 0;
		}
		psp_of_tasks[i] = (uint32_t) pPSP;

	}


}

void enable_processor_faults(void){
	uint32_t *pSHCRS = (uint32_t*) 0xE000ED24;

	*pSHCRS |= (1<<16); //mem manage
	*pSHCRS |= (1<<17);	//bus fault
	*pSHCRS |= (1<<18); //usage fault

}

uint32_t get_psp_value(void){

	return psp_of_tasks[current_task];

}

void save_psp_value(uint32_t current_psp_value){
	psp_of_tasks[current_task] = current_psp_value;

}

void update_next_task(void){
	current_task++;
	current_task = 	current_task % 4 ;
}

__attribute ((nacked)) void switch_sp_to_psp(void){
	//1.initialize the PSP with TASK1 stack start

	//get the value of psp of current task
	__asm volatile("PUSH {LR}"); //preserve LR which connects back to the main()
	__asm volatile("BL get_psp_value"); //Bl for return the that function after invoking get_psp_value
	__asm volatile("MSR PSP,R0"); //initialize psp
	__asm volatile("POP {LR}"); //pops back LR value

	//2.change SP to PSP using control register
	__asm volatile("MOV R0,#0x02");
	__asm volatile("MSR CONTROL, R0");
	__asm volatile("BX LR");
}
__attribute((nacked)) void SysTick_Handler(void){
	/*Save the context of current task*/

	//1.Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
	//2.Using that PSP value store SF2(R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
	//3.Save the current value of PSP
	__asm volatile("PUSH {LR}");
	__asm volatile("BL save_psp_value");
	/*Retrieve the context of next task*/

	//1.Decide next task to run
	__asm volatile("BL update_next_task");
	//2.get its past PSP value
	__asm volatile("BL get_psp_value");
	//3.using that PSP value retrieve SF2(R4 to R11)
	__asm volatile("LDMIA R0!,{R4-R11}");
	//4.update the PSP and exit
	__asm volatile("MSR PSP, R0");
	__asm volatile("POP {LR}");
	__asm volatile("BX LR");

}

void HardFault_Handler(void){
	printf("Hard fault\n");
	while(1);
}
void MemManage_Handler(void){

	printf("Mem Manage Fault\n");
	while(1);
}

void BusFault_Handler(void){

	printf("Bus Fault \n");
	while(1);
}
