/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int32_t add_operator(int32_t x, int32_t y){

	int32_t res;
	__asm volatile("SVC #36");
	__asm volatile("MOV R0, %0"  : "=r" (res) :);
}
int32_t divide_operator(int32_t x, int32_t y){

	int32_t res;
	__asm volatile("SVC #37");
	__asm volatile("MOV R0, %0"  : "=r" (res) :);
}
int32_t multiple_operator(int32_t x, int32_t y){

	int32_t res;
	__asm volatile("SVC #38");
	__asm volatile("MOV R0, %0"  : "=r" (res) :);
}
int32_t subtract_operator(int32_t x, int32_t y){

	int32_t res;
	__asm volatile("SVC #39");
	__asm volatile("MOV R0, %0"  : "=r" (res) :);
}

int main(void)
{

}
__attribute ((nacked)) void SVC_Handler(){

	__asm volatile("MRS R0, MSP");
	__asm volatile("B SVC_Handler_c ");
}

void SVC_Handler_c(uint32_t *pMPSholder){

	uint32_t *pR0holder =  (uint32_t*) *pMPSholder;

	switch()

}
